package service;import CourseDataTable.CourseTable;import exception.IsException;import model.Course;import repository.CourseRepository;import java.awt.*;import java.util.*;import java.util.List;import java.util.stream.Collector;import java.util.stream.Collectors;public class CourseService implements CourseRepository {    List<Course> courses = new ArrayList<>();    private static final CourseTable courseTable = new CourseTable();    @Override    public void createCourse(){        try {            System.out.println("-".repeat(50));            String id = String.valueOf(Integer.parseInt(String.valueOf(new Random().nextInt(1000))));            System.out.print("[+] Insert title: ");            String title = new Scanner(System.in).nextLine().trim();            System.out.print("[+] Insert instructor name: ");            String instructorName = new Scanner(System.in).nextLine().trim();            String[] instructorNames = instructorName.split(",");            System.out.print("[+] Insert requirement: ");            String requirement = new Scanner(System.in).nextLine().trim();            String[] requirements = requirement.split(",");            Date startDate = new Date();            if ((title.isEmpty() || instructorName.isEmpty() || requirement.isEmpty())) {                throw new IsException("Your data is not enough, please fill again.");            } else {                // create course object                Course course = new Course(id, title, instructorNames, requirements, startDate);                // add course to list                courses.add(course);            }        } catch (IsException e) {            System.out.println(e);        }    }    @Override    public void listCourse() {        courseTable.renderCourseData(courses);    }    @Override    public void searchById() {        System.out.print("Enter Id to search: ");        String id = new Scanner(System.in).nextLine();        try {            if (!id.isEmpty()) {                List<Course> courseId = courses.stream()                        .filter(n ->n.getId().equals(id))                        .collect(Collectors.toList());                if(!courseId.isEmpty()){                    System.out.println("=*=".repeat(20));                    courseTable.renderCourseData(courseId);                }else{                    System.out.println("Course Id "+id+" not found.");                }                return;            } else {                throw new IsException("No data available.");            }        }catch(IsException e) {            System.out.println(e.getMessage());        }    }    @Override    public void searchByName() {        try{            System.out.print("Enter course name to search: ");            String title = new Scanner(System.in).nextLine();            if(!title.isEmpty()){                List<Course> courseTitle = courses.stream()                        .filter(n ->n.getTitle().toLowerCase().contains(title))                        .collect(Collectors.toList());                if(!courseTitle.isEmpty()){                    System.out.println("=*=".repeat(20));                    courseTable.renderCourseData(courseTitle);                }else{                    System.out.println("Course name "+title+" not found.");                }                return;            }            throw new IsException("No data available.");        }catch (IsException e){            System.out.println(e.getMessage());        }    }    @Override    public void removeById() {        try{            System.out.println("Enter course Id to remove: ");            String id = new Scanner(System.in).nextLine();            if(!id.isEmpty()){                boolean isRemoved = courses.removeIf(n -> n.getId().equals(id));                if(isRemoved){                    System.out.println("Course Id "+id+" is removed.");                }else{                    System.out.println("Course Id "+id+" not found.");                }                return;            }            throw new IsException("No data available.");        }catch (IsException e){            System.out.println(e.getMessage());        }    }}